'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

#it takes longer than a minute to generate all the triangle numbers then check the number of divisors, so i guess you do the divisors
#number of divisors = 2**n where n is the number of prime numbers that made the number
#no repeats as the way that the maths breaks down makes the number massive
#as having the number as a factor of two square makes the number of divisors times by 3 and not two instead, basically computationally pointless
#need to create a loop so that every number that has 500 of more divisors is create from primes or repeats of primes
import math

def PC(a):#Prime Checker
    b = 0
    for i in range (2,round(math.sqrt(a))+1):
        if a/i == int(a/i):
            b += 1
    if b == 0:
        return True
    else:
        return False

def D(x):#divisors creator
    list = []
    for i in range(1,x+1):
        if x % i == 0:
            list.append(i)
    return list

def TC(x): #Triangle Checker
    a = 0
    d = 1
    while True:
        a += d
        d += 1
        if a == x:
            return True
        if a > x:
            return False

#create a list of a decent quantity of prime numbers
#then create a combination of all the different prime numbers so that there are over 500 divisors
#while one can do one of each prime number, one can get a lower number based simply off of repeats

def PG():#prime generator below 100
    l = []
    for i in range(2,100):
        if PC(i):
            l.append(i)
    return l

def DG500():#generator of numbers with over 500 divisors in size order
    list = []
    for
